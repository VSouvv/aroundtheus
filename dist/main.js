!function(){"use strict";class e{constructor(e,t,s,r,i){this._data={name:e.name,link:e.link,id:e._id,isLiked:e.isLiked},this._handleImageClick=s,this._handleDeleteClick=r,this._handleLikeClick=i,this._cardSelector=t}_setEventListeners(){this._likeIcon.addEventListener("click",(()=>{this._handleLikeClick(this._likeIcon,this._data.isLiked,this._data.id),this._data.isLiked=!this._data.isLiked})),this._deleteBtn.addEventListener("click",(()=>{this._handleDeleteClick(this._data.id,this._cardElement)})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick(this._data)}))}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardTitleEl=this._cardElement.querySelector(".card__title"),this._cardTitleEl.textContent=this._data.name,this._cardImageEl.src=this._data.link,this._cardImageEl.alt="Photo of "+this._data.name,this._likeIcon=this._cardElement.querySelector(".card__react-button"),this._deleteBtn=this._cardElement.querySelector(".card__delete-button"),this._data.isLiked?this._likeIcon.classList.add("card__react-button_active"):this._likeIcon.classList.remove("card__react-button_active"),this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_hasInvalidInput(e){return!e.every((e=>e.validity.valid))}_enableButton(){this._submitBtn.classList.remove(this._inactiveButtonClass),this._submitBtn.disabled=!1}disableButton(){this._submitBtn.classList.add(this._inactiveButtonClass),this._submitBtn.disabled=!0}_toggleButtonState(){this._hasInvalidInput(this._inputEls)?this.disableButton():this._enableButton()}resetValidation(){this._inputEls.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}setEventListeners(){this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitBtn=this._form.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault(e)})),this.setEventListeners()}}class s{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{const t=this._renderer(e);this.addItem(t)}))}addItem(e){this._container.prepend(e)}}class r{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this),this._closeButton=this._popupElement.querySelector(".modal__close-button")}open(){this._popupElement.classList.add("modal_open"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_open"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("click",(e=>{e.target===this._popupElement&&this.close()}))}}class i extends r{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputList=this._popupForm.querySelectorAll(".modal__form-input"),this._submitBtn=this._popupForm.querySelector(".modal__save-button")}_getInputValues(){return this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}reset(){this._popupForm&&this._popupForm.reset()}setEventListeners(){super.setEventListeners(),this._popupForm&&this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}open(){super.open()}setSubmitHandler(e){this._handleFormSubmit=e}setLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...",s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Save";this._submitBtn&&(e?(this._submitBtn.textContent=t,this._submitBtn.setAttribute("disabled",!0)):(this._submitBtn.textContent=s,this._submitBtn.removeAttribute("disabled")))}}const o={formSelector:".modal__form",inputSelector:".modal__form-input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__save-button-disabled",inputErrorClass:"modal__form_input_type_error",errorClass:"modal__form-input-error-visible"},n={profileEditBtn:document.querySelector("#profile-edit-btn"),profileTitleInput:document.querySelector("#profile-title-input"),profileEditForm:document.forms["profile-form"],profileDescriptionInput:document.querySelector("#profile-description-input"),placesAddBtn:document.querySelector("#places-add-btn"),placeAddForm:document.forms["add-place-form"],avatarUpdateBtn:document.querySelector("#avatar-save-btn"),avatarForm:document.forms["update-avatar-form"]},{profileEditBtn:a,profileTitleInput:l,profileEditForm:c,profileDescriptionInput:d,placesAddBtn:h,placeAddForm:u,avatarUpdateBtn:_,avatarForm:m}=n,p=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}editUserInfo(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addNewPlace(e,t){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}removePlace(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addLikeReact(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}removeLikeReact(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"ca917973-003f-412f-833a-d01c5747f711","content-type":"application/json"}});function v(e){S.open(e)}const E=new t(o,c),f=new t(o,u),b=new t(o,m),L=new i("#profile-edit-modal",(function(e){L.setLoading(!0);const t={name:e.title,about:e.description};p.editUserInfo(t.name,t.about).then((e=>{w.setUserInfo(e),L.close()})).catch((e=>{console.error("Error updating user info:",e)})).finally((()=>{L.setLoading(!1)}))})),g=new i("#places-add-modal",(function(e){g.setLoading(!0);const t={name:e.title,link:e.url};p.addNewPlace(t.name,t.link).then((e=>{const t=C({name:e.name,link:e.link,_id:e._id});B.addItem(t),g.close(),g.reset()})).catch((e=>{console.error("Error adding new place:",e)})).finally((()=>{g.setLoading(!1),f.disableButton()}))})),k=new i("#avatar-update-modal",(function(e){let{url:t}=e;k.setLoading(!0),p.updateAvatar(t).then((e=>{w.updateAvatar(t),k.reset(),k.close(),console.log("Success:",e)})).catch((e=>{console.error("Error updating profile avatar:",e)})).finally((()=>{k.setLoading(!0,"Save")}))})),S=new class extends r{constructor(e){super(e),this._previewImage=this._popupElement.querySelector(".modal__image-preview"),this._previewTitle=this._popupElement.querySelector(".modal__image-caption")}open(e){this._previewImage.src=e.link,this._previewImage.alt=e.name,this._previewTitle.textContent=e.name,super.open()}}("#places-preview-modal"),I=new i("#places-delete-modal",(()=>{}));function y(e,t){I.setSubmitHandler((()=>{I.setLoading(!0,"Removing...","Yes"),p.removePlace(e).then((()=>{t.remove(),I.close()})).catch((e=>{console.error("Error deleting place:",e)})).finally((()=>{I.setLoading(!1,"Removing...","Yes")}))})),I.open()}function C(t){return new e(t,"#card-template",v,y,q).getView()}let B;L.setEventListeners(),S.setEventListeners(),k.setEventListeners(),g.setEventListeners(),I.setEventListeners(),b.enableValidation(),E.enableValidation(),f.enableValidation(),p.getInitialCards().then((e=>{B=new s({items:e,renderer:e=>C(e)},".cards__list"),B.renderItems()})).catch((e=>console.error(e)));const w=new class{constructor(){this._profileName=document.querySelector(".profile__title"),this._profileJob=document.querySelector(".profile__description"),this._profileAvatar=document.querySelector(".profile__image")}updateAvatar(e){this._profileAvatar.src=e}getUserInfo(){return{name:this._profileName.textContent,job:this._profileJob.textContent,avatar:this._profileAvatar.src}}setUserInfo(e){let{name:t,about:s,avatar:r}=e;this._profileName.textContent=t,this._profileJob.textContent=s,r?(this._profileAvatar.src=r,this._profileAvatar.alt=t):this._profileAvatar.src="./images/avatar_default.png"}};function q(e,t,s){t?p.removeLikeReact(s).then((()=>{e.classList.remove("card__react-button_active")})).catch((e=>console.error("Error removing like reaction:",e))):p.addLikeReact(s).then((()=>{e.classList.add("card__react-button_active")})).catch((e=>console.error("Error adding like reaction:",e)))}p.getUserInfo().then((e=>{w.setUserInfo(e)})).catch((e=>console.error(e))),a.addEventListener("click",(()=>{const{name:e,job:t}=w.getUserInfo();l.value=e,d.value=t,L.open(),E.resetValidation()})),h.addEventListener("click",(()=>{g.open()})),_.addEventListener("click",(()=>{k.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,